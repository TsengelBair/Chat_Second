// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IGetRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IGetRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IGetRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IGetRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IGetRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IGetRequest_2eproto;
class IGetRequest;
class IGetRequestDefaultTypeInternal;
extern IGetRequestDefaultTypeInternal _IGetRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::IGetRequest* Arena::CreateMaybeMessage<::IGetRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class IGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IGetRequest) */ {
 public:
  inline IGetRequest() : IGetRequest(nullptr) {};
  virtual ~IGetRequest();

  IGetRequest(const IGetRequest& from);
  IGetRequest(IGetRequest&& from) noexcept
    : IGetRequest() {
    *this = ::std::move(from);
  }

  inline IGetRequest& operator=(const IGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IGetRequest& operator=(IGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IGetRequest* internal_default_instance() {
    return reinterpret_cast<const IGetRequest*>(
               &_IGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IGetRequest& a, IGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IGetRequest* New() const final {
    return CreateMaybeMessage<IGetRequest>(nullptr);
  }

  IGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IGetRequest& from);
  void MergeFrom(const IGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IGetRequest";
  }
  protected:
  explicit IGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IGetRequest_2eproto);
    return ::descriptor_table_IGetRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kChatsLimitFieldNumber = 2,
    kMessagesInChatLimitFieldNumber = 3,
  };
  // int32 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chats_limit = 2;
  bool has_chats_limit() const;
  private:
  bool _internal_has_chats_limit() const;
  public:
  void clear_chats_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 chats_limit() const;
  void set_chats_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chats_limit() const;
  void _internal_set_chats_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 messages_in_chat_limit = 3;
  bool has_messages_in_chat_limit() const;
  private:
  bool _internal_has_messages_in_chat_limit() const;
  public:
  void clear_messages_in_chat_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 messages_in_chat_limit() const;
  void set_messages_in_chat_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_messages_in_chat_limit() const;
  void _internal_set_messages_in_chat_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 chats_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 messages_in_chat_limit_;
  friend struct ::TableStruct_IGetRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IGetRequest

// int32 userId = 1;
inline void IGetRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IGetRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IGetRequest::userid() const {
  // @@protoc_insertion_point(field_get:IGetRequest.userId)
  return _internal_userid();
}
inline void IGetRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void IGetRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:IGetRequest.userId)
}

// int32 chats_limit = 2;
inline bool IGetRequest::_internal_has_chats_limit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IGetRequest::has_chats_limit() const {
  return _internal_has_chats_limit();
}
inline void IGetRequest::clear_chats_limit() {
  chats_limit_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IGetRequest::_internal_chats_limit() const {
  return chats_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IGetRequest::chats_limit() const {
  // @@protoc_insertion_point(field_get:IGetRequest.chats_limit)
  return _internal_chats_limit();
}
inline void IGetRequest::_internal_set_chats_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  chats_limit_ = value;
}
inline void IGetRequest::set_chats_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chats_limit(value);
  // @@protoc_insertion_point(field_set:IGetRequest.chats_limit)
}

// int32 messages_in_chat_limit = 3;
inline bool IGetRequest::_internal_has_messages_in_chat_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IGetRequest::has_messages_in_chat_limit() const {
  return _internal_has_messages_in_chat_limit();
}
inline void IGetRequest::clear_messages_in_chat_limit() {
  messages_in_chat_limit_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IGetRequest::_internal_messages_in_chat_limit() const {
  return messages_in_chat_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IGetRequest::messages_in_chat_limit() const {
  // @@protoc_insertion_point(field_get:IGetRequest.messages_in_chat_limit)
  return _internal_messages_in_chat_limit();
}
inline void IGetRequest::_internal_set_messages_in_chat_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  messages_in_chat_limit_ = value;
}
inline void IGetRequest::set_messages_in_chat_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_messages_in_chat_limit(value);
  // @@protoc_insertion_point(field_set:IGetRequest.messages_in_chat_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IGetRequest_2eproto
