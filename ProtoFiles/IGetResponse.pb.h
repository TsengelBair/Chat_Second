// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IGetResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IGetResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IGetResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IGetResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IGetResponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IGetResponse_2eproto;
class IChat;
class IChatDefaultTypeInternal;
extern IChatDefaultTypeInternal _IChat_default_instance_;
class IChatMessage;
class IChatMessageDefaultTypeInternal;
extern IChatMessageDefaultTypeInternal _IChatMessage_default_instance_;
class IGetResponse;
class IGetResponseDefaultTypeInternal;
extern IGetResponseDefaultTypeInternal _IGetResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::IChat* Arena::CreateMaybeMessage<::IChat>(Arena*);
template<> ::IChatMessage* Arena::CreateMaybeMessage<::IChatMessage>(Arena*);
template<> ::IGetResponse* Arena::CreateMaybeMessage<::IGetResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class IChatMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IChatMessage) */ {
 public:
  inline IChatMessage() : IChatMessage(nullptr) {};
  virtual ~IChatMessage();

  IChatMessage(const IChatMessage& from);
  IChatMessage(IChatMessage&& from) noexcept
    : IChatMessage() {
    *this = ::std::move(from);
  }

  inline IChatMessage& operator=(const IChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline IChatMessage& operator=(IChatMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IChatMessage* internal_default_instance() {
    return reinterpret_cast<const IChatMessage*>(
               &_IChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IChatMessage& a, IChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(IChatMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IChatMessage* New() const final {
    return CreateMaybeMessage<IChatMessage>(nullptr);
  }

  IChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IChatMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IChatMessage& from);
  void MergeFrom(const IChatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IChatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IChatMessage";
  }
  protected:
  explicit IChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IGetResponse_2eproto);
    return ::descriptor_table_IGetResponse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderNameFieldNumber = 3,
    kMessageContentFieldNumber = 4,
    kMessageTimestampFieldNumber = 5,
    kMessageIdFieldNumber = 1,
    kSenderIdFieldNumber = 2,
  };
  // string sender_name = 3;
  void clear_sender_name();
  const std::string& sender_name() const;
  void set_sender_name(const std::string& value);
  void set_sender_name(std::string&& value);
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  std::string* mutable_sender_name();
  std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sender_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sender_name(
      std::string* sender_name);
  private:
  const std::string& _internal_sender_name() const;
  void _internal_set_sender_name(const std::string& value);
  std::string* _internal_mutable_sender_name();
  public:

  // string message_content = 4;
  void clear_message_content();
  const std::string& message_content() const;
  void set_message_content(const std::string& value);
  void set_message_content(std::string&& value);
  void set_message_content(const char* value);
  void set_message_content(const char* value, size_t size);
  std::string* mutable_message_content();
  std::string* release_message_content();
  void set_allocated_message_content(std::string* message_content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_content(
      std::string* message_content);
  private:
  const std::string& _internal_message_content() const;
  void _internal_set_message_content(const std::string& value);
  std::string* _internal_mutable_message_content();
  public:

  // string message_timestamp = 5;
  void clear_message_timestamp();
  const std::string& message_timestamp() const;
  void set_message_timestamp(const std::string& value);
  void set_message_timestamp(std::string&& value);
  void set_message_timestamp(const char* value);
  void set_message_timestamp(const char* value, size_t size);
  std::string* mutable_message_timestamp();
  std::string* release_message_timestamp();
  void set_allocated_message_timestamp(std::string* message_timestamp);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_timestamp();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_timestamp(
      std::string* message_timestamp);
  private:
  const std::string& _internal_message_timestamp() const;
  void _internal_set_message_timestamp(const std::string& value);
  std::string* _internal_mutable_message_timestamp();
  public:

  // int32 message_id = 1;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sender_id = 2;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IGetResponse_2eproto;
};
// -------------------------------------------------------------------

class IChat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IChat) */ {
 public:
  inline IChat() : IChat(nullptr) {};
  virtual ~IChat();

  IChat(const IChat& from);
  IChat(IChat&& from) noexcept
    : IChat() {
    *this = ::std::move(from);
  }

  inline IChat& operator=(const IChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline IChat& operator=(IChat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IChat* internal_default_instance() {
    return reinterpret_cast<const IChat*>(
               &_IChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IChat& a, IChat& b) {
    a.Swap(&b);
  }
  inline void Swap(IChat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IChat* New() const final {
    return CreateMaybeMessage<IChat>(nullptr);
  }

  IChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IChat& from);
  void MergeFrom(const IChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IChat";
  }
  protected:
  explicit IChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IGetResponse_2eproto);
    return ::descriptor_table_IGetResponse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 3,
    kInterlocutorNameFieldNumber = 2,
    kChatIdFieldNumber = 1,
  };
  // repeated .IChatMessage messages = 3;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::IChatMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IChatMessage >*
      mutable_messages();
  private:
  const ::IChatMessage& _internal_messages(int index) const;
  ::IChatMessage* _internal_add_messages();
  public:
  const ::IChatMessage& messages(int index) const;
  ::IChatMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IChatMessage >&
      messages() const;

  // string interlocutor_name = 2;
  void clear_interlocutor_name();
  const std::string& interlocutor_name() const;
  void set_interlocutor_name(const std::string& value);
  void set_interlocutor_name(std::string&& value);
  void set_interlocutor_name(const char* value);
  void set_interlocutor_name(const char* value, size_t size);
  std::string* mutable_interlocutor_name();
  std::string* release_interlocutor_name();
  void set_allocated_interlocutor_name(std::string* interlocutor_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_interlocutor_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interlocutor_name(
      std::string* interlocutor_name);
  private:
  const std::string& _internal_interlocutor_name() const;
  void _internal_set_interlocutor_name(const std::string& value);
  std::string* _internal_mutable_interlocutor_name();
  public:

  // int32 chat_id = 1;
  void clear_chat_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_id() const;
  void set_chat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_id() const;
  void _internal_set_chat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IChatMessage > messages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interlocutor_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IGetResponse_2eproto;
};
// -------------------------------------------------------------------

class IGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IGetResponse) */ {
 public:
  inline IGetResponse() : IGetResponse(nullptr) {};
  virtual ~IGetResponse();

  IGetResponse(const IGetResponse& from);
  IGetResponse(IGetResponse&& from) noexcept
    : IGetResponse() {
    *this = ::std::move(from);
  }

  inline IGetResponse& operator=(const IGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IGetResponse& operator=(IGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IGetResponse* internal_default_instance() {
    return reinterpret_cast<const IGetResponse*>(
               &_IGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IGetResponse& a, IGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IGetResponse* New() const final {
    return CreateMaybeMessage<IGetResponse>(nullptr);
  }

  IGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IGetResponse& from);
  void MergeFrom(const IGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IGetResponse";
  }
  protected:
  explicit IGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IGetResponse_2eproto);
    return ::descriptor_table_IGetResponse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatsFieldNumber = 1,
    kHasMoreChatsFieldNumber = 2,
    kIsEmptyFieldNumber = 3,
  };
  // repeated .IChat chats = 1;
  int chats_size() const;
  private:
  int _internal_chats_size() const;
  public:
  void clear_chats();
  ::IChat* mutable_chats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IChat >*
      mutable_chats();
  private:
  const ::IChat& _internal_chats(int index) const;
  ::IChat* _internal_add_chats();
  public:
  const ::IChat& chats(int index) const;
  ::IChat* add_chats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IChat >&
      chats() const;

  // bool has_more_chats = 2;
  void clear_has_more_chats();
  bool has_more_chats() const;
  void set_has_more_chats(bool value);
  private:
  bool _internal_has_more_chats() const;
  void _internal_set_has_more_chats(bool value);
  public:

  // bool is_empty = 3;
  void clear_is_empty();
  bool is_empty() const;
  void set_is_empty(bool value);
  private:
  bool _internal_is_empty() const;
  void _internal_set_is_empty(bool value);
  public:

  // @@protoc_insertion_point(class_scope:IGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IChat > chats_;
  bool has_more_chats_;
  bool is_empty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IGetResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IChatMessage

// int32 message_id = 1;
inline void IChatMessage::clear_message_id() {
  message_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IChatMessage::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IChatMessage::message_id() const {
  // @@protoc_insertion_point(field_get:IChatMessage.message_id)
  return _internal_message_id();
}
inline void IChatMessage::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_id_ = value;
}
inline void IChatMessage::set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:IChatMessage.message_id)
}

// int32 sender_id = 2;
inline void IChatMessage::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IChatMessage::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IChatMessage::sender_id() const {
  // @@protoc_insertion_point(field_get:IChatMessage.sender_id)
  return _internal_sender_id();
}
inline void IChatMessage::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void IChatMessage::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:IChatMessage.sender_id)
}

// string sender_name = 3;
inline void IChatMessage::clear_sender_name() {
  sender_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IChatMessage::sender_name() const {
  // @@protoc_insertion_point(field_get:IChatMessage.sender_name)
  return _internal_sender_name();
}
inline void IChatMessage::set_sender_name(const std::string& value) {
  _internal_set_sender_name(value);
  // @@protoc_insertion_point(field_set:IChatMessage.sender_name)
}
inline std::string* IChatMessage::mutable_sender_name() {
  // @@protoc_insertion_point(field_mutable:IChatMessage.sender_name)
  return _internal_mutable_sender_name();
}
inline const std::string& IChatMessage::_internal_sender_name() const {
  return sender_name_.Get();
}
inline void IChatMessage::_internal_set_sender_name(const std::string& value) {
  
  sender_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IChatMessage::set_sender_name(std::string&& value) {
  
  sender_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IChatMessage.sender_name)
}
inline void IChatMessage::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IChatMessage.sender_name)
}
inline void IChatMessage::set_sender_name(const char* value,
    size_t size) {
  
  sender_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IChatMessage.sender_name)
}
inline std::string* IChatMessage::_internal_mutable_sender_name() {
  
  return sender_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IChatMessage::release_sender_name() {
  // @@protoc_insertion_point(field_release:IChatMessage.sender_name)
  return sender_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IChatMessage::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    
  } else {
    
  }
  sender_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IChatMessage.sender_name)
}
inline std::string* IChatMessage::unsafe_arena_release_sender_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IChatMessage.sender_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sender_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IChatMessage::unsafe_arena_set_allocated_sender_name(
    std::string* sender_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sender_name != nullptr) {
    
  } else {
    
  }
  sender_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sender_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IChatMessage.sender_name)
}

// string message_content = 4;
inline void IChatMessage::clear_message_content() {
  message_content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IChatMessage::message_content() const {
  // @@protoc_insertion_point(field_get:IChatMessage.message_content)
  return _internal_message_content();
}
inline void IChatMessage::set_message_content(const std::string& value) {
  _internal_set_message_content(value);
  // @@protoc_insertion_point(field_set:IChatMessage.message_content)
}
inline std::string* IChatMessage::mutable_message_content() {
  // @@protoc_insertion_point(field_mutable:IChatMessage.message_content)
  return _internal_mutable_message_content();
}
inline const std::string& IChatMessage::_internal_message_content() const {
  return message_content_.Get();
}
inline void IChatMessage::_internal_set_message_content(const std::string& value) {
  
  message_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IChatMessage::set_message_content(std::string&& value) {
  
  message_content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IChatMessage.message_content)
}
inline void IChatMessage::set_message_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IChatMessage.message_content)
}
inline void IChatMessage::set_message_content(const char* value,
    size_t size) {
  
  message_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IChatMessage.message_content)
}
inline std::string* IChatMessage::_internal_mutable_message_content() {
  
  return message_content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IChatMessage::release_message_content() {
  // @@protoc_insertion_point(field_release:IChatMessage.message_content)
  return message_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IChatMessage::set_allocated_message_content(std::string* message_content) {
  if (message_content != nullptr) {
    
  } else {
    
  }
  message_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IChatMessage.message_content)
}
inline std::string* IChatMessage::unsafe_arena_release_message_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IChatMessage.message_content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IChatMessage::unsafe_arena_set_allocated_message_content(
    std::string* message_content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_content != nullptr) {
    
  } else {
    
  }
  message_content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IChatMessage.message_content)
}

// string message_timestamp = 5;
inline void IChatMessage::clear_message_timestamp() {
  message_timestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IChatMessage::message_timestamp() const {
  // @@protoc_insertion_point(field_get:IChatMessage.message_timestamp)
  return _internal_message_timestamp();
}
inline void IChatMessage::set_message_timestamp(const std::string& value) {
  _internal_set_message_timestamp(value);
  // @@protoc_insertion_point(field_set:IChatMessage.message_timestamp)
}
inline std::string* IChatMessage::mutable_message_timestamp() {
  // @@protoc_insertion_point(field_mutable:IChatMessage.message_timestamp)
  return _internal_mutable_message_timestamp();
}
inline const std::string& IChatMessage::_internal_message_timestamp() const {
  return message_timestamp_.Get();
}
inline void IChatMessage::_internal_set_message_timestamp(const std::string& value) {
  
  message_timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IChatMessage::set_message_timestamp(std::string&& value) {
  
  message_timestamp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IChatMessage.message_timestamp)
}
inline void IChatMessage::set_message_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IChatMessage.message_timestamp)
}
inline void IChatMessage::set_message_timestamp(const char* value,
    size_t size) {
  
  message_timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IChatMessage.message_timestamp)
}
inline std::string* IChatMessage::_internal_mutable_message_timestamp() {
  
  return message_timestamp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IChatMessage::release_message_timestamp() {
  // @@protoc_insertion_point(field_release:IChatMessage.message_timestamp)
  return message_timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IChatMessage::set_allocated_message_timestamp(std::string* message_timestamp) {
  if (message_timestamp != nullptr) {
    
  } else {
    
  }
  message_timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IChatMessage.message_timestamp)
}
inline std::string* IChatMessage::unsafe_arena_release_message_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IChatMessage.message_timestamp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_timestamp_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IChatMessage::unsafe_arena_set_allocated_message_timestamp(
    std::string* message_timestamp) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_timestamp != nullptr) {
    
  } else {
    
  }
  message_timestamp_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_timestamp, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IChatMessage.message_timestamp)
}

// -------------------------------------------------------------------

// IChat

// int32 chat_id = 1;
inline void IChat::clear_chat_id() {
  chat_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IChat::_internal_chat_id() const {
  return chat_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IChat::chat_id() const {
  // @@protoc_insertion_point(field_get:IChat.chat_id)
  return _internal_chat_id();
}
inline void IChat::_internal_set_chat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_id_ = value;
}
inline void IChat::set_chat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_id(value);
  // @@protoc_insertion_point(field_set:IChat.chat_id)
}

// string interlocutor_name = 2;
inline void IChat::clear_interlocutor_name() {
  interlocutor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IChat::interlocutor_name() const {
  // @@protoc_insertion_point(field_get:IChat.interlocutor_name)
  return _internal_interlocutor_name();
}
inline void IChat::set_interlocutor_name(const std::string& value) {
  _internal_set_interlocutor_name(value);
  // @@protoc_insertion_point(field_set:IChat.interlocutor_name)
}
inline std::string* IChat::mutable_interlocutor_name() {
  // @@protoc_insertion_point(field_mutable:IChat.interlocutor_name)
  return _internal_mutable_interlocutor_name();
}
inline const std::string& IChat::_internal_interlocutor_name() const {
  return interlocutor_name_.Get();
}
inline void IChat::_internal_set_interlocutor_name(const std::string& value) {
  
  interlocutor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IChat::set_interlocutor_name(std::string&& value) {
  
  interlocutor_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IChat.interlocutor_name)
}
inline void IChat::set_interlocutor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interlocutor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IChat.interlocutor_name)
}
inline void IChat::set_interlocutor_name(const char* value,
    size_t size) {
  
  interlocutor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IChat.interlocutor_name)
}
inline std::string* IChat::_internal_mutable_interlocutor_name() {
  
  return interlocutor_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IChat::release_interlocutor_name() {
  // @@protoc_insertion_point(field_release:IChat.interlocutor_name)
  return interlocutor_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IChat::set_allocated_interlocutor_name(std::string* interlocutor_name) {
  if (interlocutor_name != nullptr) {
    
  } else {
    
  }
  interlocutor_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interlocutor_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IChat.interlocutor_name)
}
inline std::string* IChat::unsafe_arena_release_interlocutor_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IChat.interlocutor_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return interlocutor_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IChat::unsafe_arena_set_allocated_interlocutor_name(
    std::string* interlocutor_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (interlocutor_name != nullptr) {
    
  } else {
    
  }
  interlocutor_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      interlocutor_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IChat.interlocutor_name)
}

// repeated .IChatMessage messages = 3;
inline int IChat::_internal_messages_size() const {
  return messages_.size();
}
inline int IChat::messages_size() const {
  return _internal_messages_size();
}
inline void IChat::clear_messages() {
  messages_.Clear();
}
inline ::IChatMessage* IChat::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:IChat.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IChatMessage >*
IChat::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:IChat.messages)
  return &messages_;
}
inline const ::IChatMessage& IChat::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::IChatMessage& IChat::messages(int index) const {
  // @@protoc_insertion_point(field_get:IChat.messages)
  return _internal_messages(index);
}
inline ::IChatMessage* IChat::_internal_add_messages() {
  return messages_.Add();
}
inline ::IChatMessage* IChat::add_messages() {
  // @@protoc_insertion_point(field_add:IChat.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IChatMessage >&
IChat::messages() const {
  // @@protoc_insertion_point(field_list:IChat.messages)
  return messages_;
}

// -------------------------------------------------------------------

// IGetResponse

// repeated .IChat chats = 1;
inline int IGetResponse::_internal_chats_size() const {
  return chats_.size();
}
inline int IGetResponse::chats_size() const {
  return _internal_chats_size();
}
inline void IGetResponse::clear_chats() {
  chats_.Clear();
}
inline ::IChat* IGetResponse::mutable_chats(int index) {
  // @@protoc_insertion_point(field_mutable:IGetResponse.chats)
  return chats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IChat >*
IGetResponse::mutable_chats() {
  // @@protoc_insertion_point(field_mutable_list:IGetResponse.chats)
  return &chats_;
}
inline const ::IChat& IGetResponse::_internal_chats(int index) const {
  return chats_.Get(index);
}
inline const ::IChat& IGetResponse::chats(int index) const {
  // @@protoc_insertion_point(field_get:IGetResponse.chats)
  return _internal_chats(index);
}
inline ::IChat* IGetResponse::_internal_add_chats() {
  return chats_.Add();
}
inline ::IChat* IGetResponse::add_chats() {
  // @@protoc_insertion_point(field_add:IGetResponse.chats)
  return _internal_add_chats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IChat >&
IGetResponse::chats() const {
  // @@protoc_insertion_point(field_list:IGetResponse.chats)
  return chats_;
}

// bool has_more_chats = 2;
inline void IGetResponse::clear_has_more_chats() {
  has_more_chats_ = false;
}
inline bool IGetResponse::_internal_has_more_chats() const {
  return has_more_chats_;
}
inline bool IGetResponse::has_more_chats() const {
  // @@protoc_insertion_point(field_get:IGetResponse.has_more_chats)
  return _internal_has_more_chats();
}
inline void IGetResponse::_internal_set_has_more_chats(bool value) {
  
  has_more_chats_ = value;
}
inline void IGetResponse::set_has_more_chats(bool value) {
  _internal_set_has_more_chats(value);
  // @@protoc_insertion_point(field_set:IGetResponse.has_more_chats)
}

// bool is_empty = 3;
inline void IGetResponse::clear_is_empty() {
  is_empty_ = false;
}
inline bool IGetResponse::_internal_is_empty() const {
  return is_empty_;
}
inline bool IGetResponse::is_empty() const {
  // @@protoc_insertion_point(field_get:IGetResponse.is_empty)
  return _internal_is_empty();
}
inline void IGetResponse::_internal_set_is_empty(bool value) {
  
  is_empty_ = value;
}
inline void IGetResponse::set_is_empty(bool value) {
  _internal_set_is_empty(value);
  // @@protoc_insertion_point(field_set:IGetResponse.is_empty)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IGetResponse_2eproto
